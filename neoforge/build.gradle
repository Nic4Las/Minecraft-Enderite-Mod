plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge {
        platformPackage = "forge"
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    neoForge {
        //convertAccessWideners = true
        //extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
    shadowCommon
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle(project(path: ':common', configuration: 'transformProductionNeoForge')) { transitive false }

    modApi("me.shedaniel.cloth:cloth-config-neoforge:${rootProject.cloth_config_version}")

    modImplementation("com.misterpemodder:shulkerboxtooltip-neoforge:${rootProject.shulker_box_tooltip_version}") { transitive false }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
    atAccessWideners.add("${rootProject.archives_name}.accesswidener")
}
