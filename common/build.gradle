architectury {
    common(rootProject.enabled_platforms.split(',')) {
        it.platformPackage "neoforge", "forge"
    }
}

loom {
    accessWidenerPath = file("src/main/resources/enderitemod.accesswidener")
}

dependencies {
    // We depend on Fabric Loader here to use the Fabric @Environment annotations,
    // which get remapped to the correct annotations on each platform.
    // Do NOT use other classes from Fabric Loader.
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modApi "dev.architectury:architectury:$rootProject.architectury_api_version"

    modApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modCompileOnly modRuntimeOnly("com.misterpemodder:shulkerboxtooltip-common:${rootProject.shulker_box_tooltip_version}")
}

apply plugin: 'java'
import java.lang.reflect.Method

processResources {
    // Convert Fabric GameTest .snbt to .nbt files for NeoForge
    String inDirectory = project.projectDir.toString() + "/src/main/resources/data/enderitemod/gametest/structure"
    String outDirectory = project.projectDir.toString() + "/build/resources/main/data/enderitemod/structure"
    doLast {
        // Find snbt converter
        File[] files = sourceSets.main.runtimeClasspath.files
        URL[] urls = files.collect {e -> e.toURI().toURL()} as URL[]
        def classloader = new URLClassLoader(urls)
        Class myClass = classloader.findClass("net.enderitemc.enderitemod.tests.ConvertNbt")
        def myInstance = myClass.newInstance()
        Method method = myClass.getMethod("convertSnbt2Nbt", List<String>, String)

        // Execute snbt to nbt converter
        List<String> filess = List.of(new File(inDirectory).absolutePath)
        String out_file1 = new File(outDirectory).absolutePath
        method.invoke(myInstance, filess, out_file1)
    }
}